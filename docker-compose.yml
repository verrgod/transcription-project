networks:
  triton-net:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    #networks:
    #  - triton
    #depends_on:
    #  - backend

  triton:
    image: my-triton-faster-whisper:latest
    container_name: triton-faster-whisper
    command: tritonserver --model-repository=/models
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]  # Requires Docker + NVIDIA runtime

    volumes:
      - ./faster-whisper-docker/models:/models

    ports:
      - "8000:8000"  # HTTP
      - "8001:8001"  # gRPC
      - "8002:8002"  # Metrics

    shm_size: 1g
    ulimits:
      memlock: -1
      stack: 67108864

    runtime: nvidia
    privileged: true
    networks:
      - triton-net

  minio-server:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - minio.env
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio-server:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - kafka
    networks:
      - triton-net

  mc:
    image: minio/mc
    env_file:
      - minio.env
      - kafka.env
    entrypoint: >
      /bin/sh -c "
      mc alias set dc-minio http://minio-server:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} && \
      mc mb --ignore-existing dc-minio/media && \
      mc event list dc-minio/media | grep 'sqs' || {
        mc event add --event put --suffix .mp3 dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .mp4 dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .wav dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .avi dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .mov dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .flac dc-minio/media arn:minio:sqs::1:kafka && \
        mc event add --event put --suffix .mkv dc-minio/media arn:minio:sqs::1:kafka;
      }"
    depends_on:
      - minio-server
      - kafka-setup
    networks:
      - triton-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
      - 29092:29092
    env_file:
      - kafka.env
    networks:
      - triton-net

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8088:8088
    env_file:
      - ksql.env
    networks:
      - triton-net

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    volumes:
      - ./ksql-init/:/data/scripts/
    entrypoint:
    - /bin/bash
    - -c
    - |
      echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
      while [ $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) -eq 000 ]
      do 
        echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) " (waiting for 200)"
        sleep 5
      done
      echo -e "\n\n-> Running KSQL commands\n"
      cat /data/scripts/init.sql <(echo 'EXIT')| ksql http://ksqldb-server:8088
      echo -e "\n\n-> Sleeping…\n"
      sleep infinity     
    networks:
      - triton-net

  event-consumer:
    image: confluentinc/cp-kafkacat
    tty: true
    stdin_open: true
    environment:
      SLEEP_TIME: 40
    entrypoint: "kafkacat -b kafka:9092 -C -K: \
                          -f '\nKey (%K bytes): %k\t\nValue (%S bytes): %s\n\Partition: %p\tOffset: %o\n--\n' \
                          -t minio-events-v1"
    depends_on:
      - kafka
    networks:
      - triton-net

  # service for topic creation only, is success must exit 0
  kafka-setup:
    image: confluentinc/cp-kafka
    hostname: kafka-setup
    container_name: kafka-setup
    restart: on-failure
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                      cub kafka-ready -b kafka:9092 1 40 && \
                      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 10 --replication-factor 1 --topic minio-events-v1 && \
                      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 10 --replication-factor 1 --topic vtt-upload'"

    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - triton-net

  media-processor:
    build:
      context: ./media_processor
      dockerfile: Dockerfile
    networks:
      - triton-net
    depends_on:
      - kafka
      - triton
      - minio-server
    environment:
      INFERENCE_URL: http://triton:8000/v2/models/faster-whisper-large-v3/infer
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio-server:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    restart: on-failure

  ksqldb-init:
    image: curlimages/curl:7.79.1
    container_name: ksqldb-init
    depends_on:
      - ksqldb-server
    volumes:
      - ./ksql-init/init.sql:/init.sql
      - ./ksql-init/ksql-entry.sh:/docker-entrypoint.sh
    entrypoint: ["/bin/sh", "/docker-entrypoint.sh"]
    networks:
      - triton-net

  schema-registry:
    image: confluentinc/cp-schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    depends_on:
      - kafka
    networks:
      - triton-net      